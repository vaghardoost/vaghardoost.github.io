{"pageProps":{"note":{"id":"24ae5013e83ef5dd","title":"مثال معماری میکروسرویس","content":[{"richtext":[{"content":[{"text":"معماری میکروسرویس تعریف های زیادی داره که یکیش تقسیم یک برنامه بزرگ به  چند برنامه هماهنگ با هم و یکپارچه هست. نمونه کدی رو نوشتم که میتونه یک  مثال خوب برای این تعریف باشه.","style":{"weight":[]}}]}],"id":"6d21edf3","type":"caption"},{"header":"h3","text":"سناریو","id":"c932697d","type":"title"},{"richtext":[{"content":[{"text":"کاری که این سیستم انجام میده اینه که یک سری محصول یا product رو میگیره ، ذخیره میکنه و موجودی خودشو نشون میده.","style":{"weight":[]}}]},{"content":[{"text":"به ساده ترین شکل ممکن نوشته شده و از اضافه کردن role و احراز هویت و این صحبت ها هم به دلیل حفظ سادگی و تسریع زمان صرف نظر شده.","style":{"weight":[]}}]},{"content":[{"text":"نمونه  کدی که نوشتم تحت فریم ورک nestjs ایجاد شده. یعنی از حالت های کلاسیک و  عادی فاصله داره و ساختار مربوط به خودشو داره. تو این کد سعی کردم بیشتر  معماری میکروسرویس رو براساس ساختار nestjs توضیح بدم. ","style":{"weight":[]}}]}],"id":"5e18df7e","type":"caption"},{"header":"h3","text":"توضیح ساختار","id":"bb3283a9","type":"title"},{"richtext":[{"content":[{"text":"برای درک این مثال ، نیاز هست که شما با نرم افزار Kafka و فریم ورک nestjs آشنایی داشته باشید.","style":{"weight":[]}}]},{"content":[{"text":"توی این مثال هم از redis هم استفاده شده که اگر آشنایی ندارید میشه از داخل همین مثال هم متوجه اون شد.","style":{"weight":[]}}]},{"content":[{"text":"برای پایگاه داده های این مثال هم از mongodb استفاده شده.","style":{"weight":[]}}]},{"content":[{"text":"بستر  اجرای مثال هم با docker پیاده سازی شده که کار کردن با اون به هیچ وجه  سخت نیست. هرچند میشه بدون docker هم این مثال رو اجرا کرد اما استفاده از  docker خیلی مهم شده و تقریبا اکثر نرم افزار ها برای پیشتیبانی و مدیریت  بهتر منابع سرور ها با docker اجرا میشن.","style":{"weight":[]}}]}],"id":"20e0d6ea","type":"caption"},{"richtext":[],"url":"http://localhost:31375/photo/818cce0145fceee77e5d2397cca0135b.png","id":"7d6ce261","type":"photo"},{"richtext":[{"content":[{"text":"میکروسرویس های این سیستم با استفاده از فریمورک nestjs ساخته شده. این  میکروسرویس ها هرکدوم عهده دار یک ویژگی هستن. هرکدوم ازین میکروسرویس ها  رو جداگانه معرفی میکنم و توضیح میدم.","style":{"weight":[]}}]}],"id":"b5969dac","type":"caption"},{"header":"h3","text":"Rest Api Gate (دریافت کننده اصلی)","id":"911853b1","type":"title"},{"richtext":[{"content":[{"text":"البته از دیدگاه فریمورک nestjs یک nest  server application بحساب میاد. کار این قسمت که حالا میکروسرویس باشه یا  نباشه اینه که داده دریافت میکنه و به اقتضای نوع داده و محل دریافت داده  اونو برای میکروسرویس مربوط ارسال میکنه.","style":{"weight":[]}}]},{"content":[{"text":"هر میکروسرویس توی این  دریافت کننده اصطلاحا نمایندگی داره. ینی توی کنترلر اصلی ، جایی که سرور  پیام دریافت میکنه فوری برای میکروسرویس مربوط بهش ارسال میشه و جواب هم  بدون هیچ تغییر از سمت سرور برگردونده میشه.","style":{"weight":[]}}]},{"content":[{"text":"البته ممکنه احراز هویتی  اگر بخاد وجود داشته باشه توی همین قسمت اتفاق میوفته ، اما ، اعتبارسنجی  داده های ورودی که توی همین مثال هست هم توی سرور انجام میشه که اطمینان  باشه که سرور داره داده درست و معتبر به میکروسرویس میفرسته.","style":{"weight":[]}}]}],"id":"ee4e0812","type":"caption"},{"header":"h3","text":"Writer Service (سرویس نویسنده)","id":"bd11c9e8","type":"title"},{"richtext":[{"content":[{"text":"کار این سرویس فقط همینه که داده ای که سرور  دریافت کرده و براش فرستاده رو توی پایگاه داده ی مشترک ذخیره کنه. این  داده هم توی پایگاه داده ذخیره میشه و هم به صورت خلاصه توی redis ذخیره  میشه.","style":{"weight":[]}}]},{"content":[{"text":"دلیل اینکه چرا از redis استفاده میشه هم اینه که redis داده  رو روی ram ذخیره میکنه و سرعت بیشتری در خوندن و نوشتن داده ها ، نسبت به  هارد دیسک ها و ssd داره.","style":{"weight":[]}}]}],"id":"1abd11d4","type":"caption"},{"header":"h3","text":"Reader Service (سرویس خواننده)","id":"8aaefcf8","type":"title"},{"richtext":[{"content":[{"text":"این سرویس هم نقش خوندن داده ها رو برعهده داره ینی جایی که مثلا کاربرها  میخان محصولات رو ببینن و میان و سرور rest برای این میکروسرویس درخواست  میفرسته که مثلا همه یا یکی از محصولات رو نشون بده و سرویس هم از روی  redis این کار رو انجام میده که سرعت بیشتری پیدا کنه.","style":{"weight":[]}}]}],"id":"e3e403d7","type":"caption"},{"header":"h3","text":"سایر اجزاء","id":"266b803d","type":"title"},{"richtext":[{"content":[{"text":"بین این سرویس ها و سرور rest که توسط برنامه نویسی ساخته شده ","style":{"weight":[]}},{"text":"(خودمو میگم)","style":{"weight":["ITALIC"]}},{"text":" ، این سیستم از یه سری از اجزای دیگه هم استفاده کرده. که اگر قسمت های  بالا تر رو خونده باشید از kafka برای پیام رسانی بین سرویس ها ، از redis  برای ذخیره سازی داده های پر استفاده و کم حجم و از mongodb هم به عنوان  پایگاه داده های کلی سیستم استفاده شده.","style":{"weight":[]}}]},{"content":[{"text":"استفاده از اون هم به صورت  یک image هست که داخل docker hub قرار داره. به وسیله ابزار docker compose  که بسیار جالب و کاربردی هم هست. تمام دستوراتی که شما توی shell باید  بزنید رو به صورت مرتب و معنا دار و منظم تر داخل یک فایل با فرمت yml  میارید و خود compose اقدام به اعمال اون روی engine داکر میکنه و کار ها  رو بسیار سریع تر میکنه.","style":{"weight":[]}}]}],"id":"ddd792ac","type":"caption"},{"header":"h3","text":"نتیجه گیری","id":"30635699","type":"title"},{"richtext":[{"content":[{"text":"این یک مثال هست که بشدت ساده هست اما بخاطر  معماری میکروسرویس توسعه پذیری بالایی پیدا کرده ینی همین کدهای مثال و  ساده رو میشه به راحتی توسعه داد و به سمت یک سیستم معنا دار هدایت کرد.","style":{"weight":[]}}]},{"content":[{"text":"از  یه طرف وجود داکر هم توی این قصه بی تاثیر نیست چون میشه منابع رو کنترل  کرد سرویس ها رو با ترتیب و نظم ایجاد و مدیریت کرد و توی مساله  performance بسیاری از مشکلات رو  برطرف کرد.","style":{"weight":[]}}]}],"id":"cbb3b223","type":"caption"}],"author":1,"createAt":"1677754074738","tag":["معماری ","میکروسرویس","نرم افزار"],"photo":"3ae212a22b00d32e037e5e5556dfb77c.jpeg","category":{"id":"f95a8cc667210192","label":"پروژه ها و سورس کد","admin":1,"description":"توضیح درباره کد هایی که قبلا ایجاد کرده ام","color":"#bf5140","avatar":"abf967f473dd6dd3dde877bc2343668a.png","_id":"640076f21ffd7ad6cb625504","parent":"487df254edf343cb","notes":[{"id":"24ae5013e83ef5dd","title":"مثال معماری میکروسرویس","author":1,"createAt":"1677754074738","tag":["معماری ","میکروسرویس","نرم افزار"],"photo":"3ae212a22b00d32e037e5e5556dfb77c.jpeg","category":"f95a8cc667210192"},{"id":"21ab00339d30532e","title":"معرفی FCMS","author":1,"createAt":"1677783552223","tag":[],"category":"f95a8cc667210192","photo":"6cdc66eee3f23559c1434a6210f86722.jpeg"}]}}},"__N_SSG":true}